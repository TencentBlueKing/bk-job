spring:
  application:
    name: job-crontab
  cloud:
    stream:
      defaultBinder: jobCommon
      binders:
        jobCommon:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: __BK_JOB_RABBITMQ_HOST__
                port: __BK_JOB_RABBITMQ_PORT__
                username: __BK_JOB_RABBITMQ_USERNAME__
                password: __BK_JOB_RABBITMQ_PASSWORD__
                virtual-host: __BK_JOB_RABBITMQ_VHOST__
        jobCrontab:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: __BK_JOB_RABBITMQ_HOST__
                port: __BK_JOB_RABBITMQ_PORT__
                username: __BK_JOB_RABBITMQ_USERNAME__
                password: __BK_JOB_RABBITMQ_PASSWORD__
                virtual-host: __BK_JOB_RABBITMQ_VHOST__
      source: crontabFanout
      bindings:
        handleCrontabFanoutEvent-in-0:
          destination: crontab.fanout
          binder: jobCrontab
          consumer:
            concurrency: 5
        crontabFanout-out-0:
          destination: crontab.fanout
          binder: jobCrontab
          consumer:
            concurrency: 5
      rabbit:
        bindings:
          handleCrontabFanoutEvent-in-0:
            consumer:
              maxConcurrency: 5
              exchangeType: fanout
          crontabFanout-out-0:
            producer:
              exchangeType: fanout
            consumer:
              maxConcurrency: 5
              exchangeType: fanout
    function:
      definition: handleCrontabFanoutEvent
  datasource:
    job-crontab:
      driver-class-name: io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver
      type: com.zaxxer.hikari.HikariDataSource
      jdbc-url: jdbc:otel:mysql://__BK_JOB_CRONTAB_MYSQL_HOST__:__BK_JOB_CRONTAB_MYSQL_PORT__/job_crontab?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
      username: __BK_JOB_CRONTAB_MYSQL_USERNAME__
      password: __BK_JOB_CRONTAB_MYSQL_PASSWORD__
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 600000
      poolName: "job-crontab"
      validationTimeout: 5000
  redis:
    {# 社区版默认配置 -#}
    {% if job_edition != "ee" -%}
    # 使用单机Redis时的配置项
    host: __BK_JOB_CRONTAB_REDIS_HOST__
    port: __BK_JOB_CRONTAB_REDIS_PORT__
    # 使用Redis Sentinel时的配置项
    #sentinel:
      #password: __BK_JOB_CRONTAB_REDIS_SENTINEL_PASSWORD__
      #master: __BK_JOB_CRONTAB_REDIS_SENTINEL_MASTER__
      #nodes: __BK_JOB_CRONTAB_REDIS_SENTINEL_NODES__
    {% endif -%}
    {# 企业版默认配置 -#}
    {% if job_edition == "ee" -%}
    # 使用单机Redis时的配置项
    #host: __BK_JOB_CRONTAB_REDIS_HOST__
    #port: __BK_JOB_CRONTAB_REDIS_PORT__
    # 使用Redis Sentinel时的配置项
    sentinel:
      password: __BK_JOB_CRONTAB_REDIS_SENTINEL_PASSWORD__
      master: __BK_JOB_CRONTAB_REDIS_SENTINEL_MASTER__
      nodes: __BK_JOB_CRONTAB_REDIS_SENTINEL_NODES__
    {% endif -%}
    password: __BK_JOB_CRONTAB_REDIS_PASSWORD__
    database: 0
    lettuce:
      pool:
        min-idle: 5
        max-idle: 10
        max-active: 8
        max-wait: 1ms
      shutdown-timeout: 100ms
  quartz:
    # 使用内存存储
    job-store-type: MEMORY
    properties:
      org:
        quartz:
          jobStore:
            class: org.quartz.simpl.RAMJobStore
            misfireThreshold: 60000
          plugin:
            shutdownhook:
              class: org.quartz.plugins.management.ShutdownHookPlugin
              cleanShutdown: true
            triggHistory:
              class: org.quartz.plugins.history.LoggingJobHistoryPlugin
          scheduler:
            # 调度器实例名称
            instanceName: quartz-scheduler
            # 调度器实例编号自动生成
            instanceId: AUTO
            skipUpdateCheck: true
            batchTriggerAcquisitionMaxCount: 50
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 300
ribbon:
  ReadTimeout: 120000
  ConnectTimeout: 10000
  eureka:
    enabled: false
job:
  crontab:
    # 连续启动失败通知策略：默认 从第一次失败开始，连续失败每5次通知第一次 begin = 1；frequency = 5；totalTimes = -1
    notification-policy:
      failed:
        start:
          # 通知开始：默认 1 - 从第一次失败开始通知
          begin: 1
          # 通知频率：默认 5 - 每5次通知， 1 - 每次通知
          frequency: 5
          # 通知次数：默认 -1 - 不限制通知次数， 0 - 不通知， 1 - 只通知1次，
          total: -1
