{{- if and .Values.backupConfig.enabled (eq .Values.deploy.mode "standard") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-backup
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: "job-backup"
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
data:
  application.yaml: |-
    spring:
      cloud:
        stream:
          defaultBinder: jobCommon
          binders:
            jobCommon:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
          source: archive-task
          bindings:
            handleArchiveTaskEvent-in-0:
              destination: archive.task
              group: service.job.backup
              binder: jobCommon
              consumer:
                concurrency: 5
            archive-task-out-0:
              destination: archive.task
              group: service.job.backup
              binder: jobCommon
              consumer:
                concurrency: 5
          rabbit:
            bindings:
              handleArchiveTaskEvent-in-0:
                consumer:
                  maxConcurrency: 20
              archive-task-out-0:
                consumer:
                  maxConcurrency: 20
        function:
          definition: handleArchiveTaskEvent
      datasource:
        job-backup:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_backup{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 20
          minimum-idle: 5
          idle-timeout: 600000
          poolName: "job-backup"
          validationTimeout: 5000
        {{- if and .Values.backupConfig.archive.execute.enabled }}
        job-execute:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_execute{{ .Values.backupConfig.archive.execute.mariadb.connection.properties }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 10
          minimum-idle: 2
          idle-timeout: 6000
          poolName: "job-execute"
          validationTimeout: 5000
        {{- end }}  
        {{- if and .Values.backupConfig.archive.execute.enabled (or (eq .Values.backupConfig.archive.execute.mode "backupThenDelete") (eq .Values.backupConfig.archive.execute.mode "backupOnly")) }}
        job-execute-archive:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{ .Values.backupConfig.archive.mariadb.host }}:{{ .Values.backupConfig.archive.mariadb.port }}/job_execute{{ .Values.backupConfig.archive.mariadb.connection.properties }}
          username: {{ .Values.backupConfig.archive.mariadb.username }}
          password: ${archive-mariadb-password}
          maximum-pool-size: 10
          minimum-idle: 2
          idle-timeout: 6000
          poolName: "job-execute-archive"
          validationTimeout: 5000
        {{- end }}
      redis:
      {{- include "job.redis.config" . | indent 8 }}
        database: 0
        lettuce:
          pool:
            min-idle: 5
            max-idle: 10
            max-active: 8
            max-wait: 1ms
          shutdown-timeout: 100ms
      servlet:
        multipart:
          max-file-size: 5GB
          max-request-size: 5GB
    ribbon:
      ReadTimeout: 60000
      ConnectTimeout: 10000
      eureka:
        enabled: false
    server:
      port: {{ .Values.backupConfig.containerPort }}
    job:
      backup:
        storage-backend: {{ .Values.backupConfig.storageBackend }}
        artifactory:
          repo: {{ .Values.backupConfig.artifactory.repo }}
        archive:  
          execute:
            {{- toYaml .Values.backupConfig.archive.execute | nindent 12 }}
    {{ if .Values.executeConfig.sharding.mariadb.enabled }}
    shardingsphere:
      enabled: true
      databaseName: "job_execute"
      dataSources:
        {{- range .Values.executeConfig.sharding.mariadb.datasources }}
        ds_{{ .index }}:
          driverClassName: {{ include "job.jdbcMysqlDriverClass" . }}
          jdbcUrl: {{ .jdbcUrl }}
          username: {{ .username }}
          password: {{ .password }}
        {{- end }}
      shardingRule:
        # 数据分片规则配置
        tables:
          task_instance:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "task_instance" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: task_instance_table_hint_inline
          step_instance:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: step_instance_table_hint_inline
          step_instance_script:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_script" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: step_instance_script_table_hint_inline
          step_instance_file:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_file" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: step_instance_file_table_hint_inline
          step_instance_confirm:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_confirm" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: step_instance_confirm_table_hint_inline
          gse_script_execute_obj_task:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "gse_script_execute_obj_task" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: gse_script_execute_obj_task_table_hint_inline
          gse_file_execute_obj_task:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "gse_file_execute_obj_task" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: gse_file_execute_obj_task_table_hint_inline
          gse_task:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "gse_task" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: gse_task_table_hint_inline
          file_source_task_log:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "file_source_task_log" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: file_source_task_log_table_hint_inline
          operation_log:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "operation_log" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: operation_log_table_hint_inline
          task_instance_variable:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "task_instance_variable" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: task_instance_variable_table_hint_inline
          step_instance_variable:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_variable" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: step_instance_variable_table_hint_inline
          rolling_config:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "rolling_config" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: rolling_config_table_hint_inline
          step_instance_rolling_task:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_rolling_task" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: step_instance_rolling_task_table_hint_inline
          task_instance_app:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "task_instance_app" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: task_instance_app_table_hint_inline
          task_instance_host_app:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "task_instance_host_app" "context" $) }}
            tableStrategy:
              type: hint
              shardingAlgorithmName: task_instance_host_app_table_hint_inline
        # 默认分库策略
        defaultDatabaseStrategy:
          type: hint
          shardingAlgorithmName: default_database_hint_inline
        ## 分库分表算法
        shardingAlgorithms:
          ## 分库算法
          ##
          # 默认分库算法
          default_database_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.database.algorithm.expression" . }}
          ## 分表算法
          task_instance_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "task_instance" "context" $) }} 
          step_instance_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "step_instance" "context" $) }}
          step_instance_script_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_script" "context" $) }}
          step_instance_file_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_file" "context" $) }}
          step_instance_confirm_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_confirm" "context" $) }}
          gse_script_execute_obj_task_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "gse_script_execute_obj_task" "context" $) }}
          gse_file_execute_obj_task_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "gse_file_execute_obj_task" "context" $) }}
          gse_task_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "gse_task" "context" $) }}
          file_source_task_log_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "file_source_task_log" "context" $) }}
          operation_log_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "operation_log" "context" $) }}
          task_instance_variable_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "task_instance_variable" "context" $) }}
          step_instance_variable_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_variable" "context" $) }}
          rolling_config_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "rolling_config" "context" $) }}
          step_instance_rolling_task_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_rolling_task" "context" $) }}
          task_instance_app_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "task_instance_app" "context" $) }}
          task_instance_host_app_table_hint_inline:
            type: HINT_INLINE
            props:
              algorithm-expression: {{ include "job.backup.sharding.table.algorithm.expression" ( dict "tableName" "task_instance_host_app" "context" $) }}
    {{- end }}
{{- end }}
