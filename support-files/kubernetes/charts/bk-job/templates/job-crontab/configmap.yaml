{{- if and .Values.crontabConfig.enabled (eq .Values.deploy.mode "standard") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-crontab
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: "job-crontab"
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
data:
  application.yaml: |-
    spring:
      cloud:
        stream:
          defaultBinder: jobCommon
          binders:
            jobCommon:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
            jobCrontab:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
          source: crontabFanout
          bindings:
            handleCrontabFanoutEvent-in-0:
              destination: crontab.fanout
              binder: jobCrontab
              consumer:
                concurrency: 5
            crontabFanout-out-0:
              destination: crontab.fanout
              binder: jobCrontab
              consumer:
                concurrency: 5
          rabbit:
            bindings:
              handleCrontabFanoutEvent-in-0:
                consumer:
                  maxConcurrency: 5
                  exchangeType: fanout
              crontabFanout-out-0:
                producer:
                  exchangeType: fanout
                consumer:
                  maxConcurrency: 5
                  exchangeType: fanout
        function:
          definition: handleCrontabFanoutEvent
      datasource:
        job-crontab:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          {{- include "job.crontab.databaseConfig" . | nindent 10 }}
          maximum-pool-size: {{ .Values.crontabConfig.database.maxPoolSize }}
          minimum-idle: 5
          idle-timeout: 600000
          poolName: "job-crontab"
          validationTimeout: 5000
      redis:
        {{- include "job.redis.config" . | indent 8 }}
        database: 0
        lettuce:
          pool:
            min-idle: 5
            max-idle: 10
            max-active: 8
            max-wait: 1ms
          shutdown-timeout: 100ms
      quartz:
        job-store-type: MEMORY
        properties:
          org:
            quartz:
              jobStore:
                class: org.quartz.simpl.RAMJobStore
                misfireThreshold: 60000
              plugin:
                shutdownhook:
                  class: org.quartz.plugins.management.ShutdownHookPlugin
                  cleanShutdown: true
                triggHistory:
                  class: org.quartz.plugins.history.LoggingJobHistoryPlugin
              scheduler:
                # 调度器实例名称
                instanceName: quartz-scheduler
                # 调度器实例编号自动生成
                instanceId: AUTO
                skipUpdateCheck: true
                batchTriggerAcquisitionMaxCount: {{ .Values.crontabConfig.quartz.scheduler.batchTriggerAcquisitionMaxCount }}
              threadPool:
                class: org.quartz.simpl.SimpleThreadPool
                threadCount: {{ .Values.crontabConfig.quartz.threadPool.threadCount }}
    ribbon:
      ReadTimeout: 120000
      ConnectTimeout: 10000
      eureka:
        enabled: false
    feign:
      {{- toYaml .Values.crontabConfig.feign | nindent 6 }}
    job:
      crontab:
        notification-policy:
          failed:
            start:
              begin: {{ .Values.crontabConfig.notificationPolicy.failed.start.begin | default 1 }}
              frequency: {{ .Values.crontabConfig.notificationPolicy.failed.start.frequency | default 5 }}
              total: {{ .Values.crontabConfig.notificationPolicy.failed.start.total | default -1 }}
    server:
      port: {{ .Values.crontabConfig.containerPort }}
{{- end }}
