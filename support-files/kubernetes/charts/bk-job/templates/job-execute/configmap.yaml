{{- if and .Values.executeConfig.enabled (eq .Values.deploy.mode "standard") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-execute
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component : "job-execute"
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
data:
  application.yaml: |-
    spring:
      cloud:
        stream:
          defaultBinder: jobCommon
          binders:
            jobCommon:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
            jobExecute:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
          source: task;step;gseTask;resultHandleTaskResume;notifyMsg;callback
          bindings:
            handleJobEvent-in-0:
              destination: task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            task-out-0:
              destination: task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleStepEvent-in-0:
              destination: step
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            step-out-0:
              destination: step
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleGseTaskEvent-in-0:
              destination: gse.task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 10
            gseTask-out-0:
              destination: gse.task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 10
            handleResultHandleResumeEvent-in-0:
              destination: result.handle.task.resume
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            resultHandleTaskResume-out-0:
              destination: result.handle.task.resume
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleNotifyMsg-in-0:
              destination: notify.msg
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            notifyMsg-out-0:
              destination: notify.msg
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleCallbackMsg-in-0:
              destination: task.callback
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            callback-out-0:
              destination: task.callback
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
          rabbit:
            bindings:
              handleJobEvent-in-0:
                consumer:
                  maxConcurrency: 10
              task-out-0:
                consumer:
                  maxConcurrency: 10
              handleStepEvent-in-0:
                consumer:
                  maxConcurrency: 10
              step-out-0:
                consumer:
                  maxConcurrency: 10
              handleGseTaskEvent-in-0:
                consumer:
                  maxConcurrency: 20
              gseTask-out-0:
                consumer:
                  maxConcurrency: 20
              handleResultHandleResumeEvent-in-0:
                consumer:
                  maxConcurrency: 10
              resultHandleTaskResume-out-0:
                consumer:
                  maxConcurrency: 10
              handleNotifyMsg-in-0:
                consumer:
                  maxConcurrency: 10
              notifyMsg-out-0:
                consumer:
                  maxConcurrency: 10
              handleCallbackMsg-in-0:
                consumer:
                  maxConcurrency: 10
              callback-out-0:
                consumer:
                  maxConcurrency: 10
        function:
          definition: handleJobEvent;handleStepEvent;handleGseTaskEvent;handleResultHandleResumeEvent;handleNotifyMsg;handleCallbackMsg;busConsumer
      datasource:
        {{- if .Values.executeConfig.mysql.standalone.enabled }}
        job-execute:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_execute{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 100
          minimum-idle: 20
          idle-timeout: 600000
          poolName: "job-execute-standalone"
          validationTimeout: 5000
        {{- end }}
        {{- if .Values.executeConfig.mysql.verticalSharding.enabled }}
        {{- if .Values.executeConfig.mysql.verticalSharding.datasource }}
        {{- range $dsName, $ds := .Values.executeConfig.mysql.verticalSharding.datasource }}
        {{ $dsName }}:
            driverClassName: {{ include "job.jdbcMysqlDriverClass" . }}
            jdbcUrl: {{ $ds.jdbcUrl | quote }}
            username: {{ $ds.username | quote }}
            password: {{ $ds.password | quote }}
            maximumPoolSize: {{ $ds.maximumPoolSize | default 100 }}
            minimumIdle: {{ $ds.minimumIdle | default 20 }}
            idleTimeout: {{ $ds.idleTimeout | default 600000 }}
            poolName: {{ $ds.poolName | default "job-execute" }}
            validationTimeout: {{ $ds.validationTimeout | default 5000 }}
        {{- end }}
        {{- end }}
        {{- end }}
      redis:
        {{- include "job.redis.config" . | indent 8 }}
        database: 0
        lettuce:
          pool:
            min-idle: 5
            max-idle: 10
            max-active: 20
            max-wait: 10ms
          shutdown-timeout: 100ms
    server:
      port: {{ .Values.executeConfig.containerPort }}
    feign:
      {{- toYaml .Values.executeConfig.feign | nindent 6 }}
    job:
      execute:
        log-export:
          storage-backend: {{ .Values.executeConfig.logExport.storageBackend }}
          artifactory:
            repo: {{ .Values.executeConfig.logExport.artifactory.repo }}
        file:
          distribute:
            root-path: {{ .Values.fileDistribute.hostPath }}/local
        scriptTask:
          query:
            contentSizeLimit: {{ .Values.executeConfig.scriptTask.query.contentSizeLimit }}
        iam:
          {{- toYaml .Values.executeConfig.iam | nindent 10 }}
    mysql:
      dataSourceMode: {{ .Values.executeConfig.mysql.dataSourceMode }}
      migration:
        enabled: {{ .Values.executeConfig.mysql.migration.enabled }}
      standalone:
        enabled: {{ .Values.executeConfig.mysql.standalone.enabled }}
      verticalSharding:
        enabled: {{ .Values.executeConfig.mysql.verticalSharding.enabled }}
      sharding:
        enabled: {{ .Values.executeConfig.mysql.sharding.enabled }}
        {{- if .Values.executeConfig.mysql.sharding.enabled }}
        databases:
          job_execute:
            logicDatabaseName: job_execute
            dataSourceDriverClassName: {{ include "job.jdbcMysqlDriverClass" . }}
            username: {{ .Values.executeConfig.mysql.sharding.databases.job_execute.username | quote }}
            password: {{ .Values.executeConfig.mysql.sharding.databases.job_execute.password | quote }}
            # 数据源分组配置
            dataSourceGroups:
              {{- toYaml .Values.executeConfig.mysql.sharding.databases.job_execute.dataSourceGroups | nindent 14 }}
            shardingRule:
              # 数据分片规则配置
              tables:
                task_instance:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: id
                    shardingAlgorithmName: job_instance_standard
                step_instance:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                step_instance_script:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                step_instance_file:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                step_instance_confirm:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                gse_script_execute_obj_task:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                gse_file_execute_obj_task:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                gse_task:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                file_source_task_log:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                operation_log:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                task_instance_variable:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                step_instance_variable:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                rolling_config:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                step_instance_rolling_task:
                  {{ include "job.execute.sharding.jobInstance.dataNodes" . }}
                  databaseStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                  tableStrategy:
                    type: standard
                    shardingColumn: task_instance_id
                    shardingAlgorithmName: job_instance_standard
                task_instance_app:
                  {{ include "job.execute.sharding.jobInstanceSearch.dataNodes" . }}
                  databaseStrategy:
                    type: complex
                    shardingColumns: app_id,id
                    shardingAlgorithmName: task_instance_app_complex
                  tableStrategy:
                    type: complex
                    shardingColumns: app_id,id
                    shardingAlgorithmName: task_instance_app_complex
                task_instance_host:
                  {{ include "job.execute.sharding.jobInstanceSearch.dataNodes" . }}
                  databaseStrategy:
                    type: complex
                    shardingColumns: app_id,task_instance_id
                    shardingAlgorithmName: task_instance_host_complex
                  tableStrategy:
                    type: complex
                    shardingColumns: app_id,task_instance_id
                    shardingAlgorithmName: task_instance_host_complex
              # 绑定表规则
              bindingTables:
                - task_instance_app,task_instance_host
              ## 分库分表算法
              shardingAlgorithms:
                # 作业实例基础数据分库分表算法
                job_instance_standard:
                  type: JOB_ID_HASH_STANDARD
                  props:
                    dataNodes: {{ .Values.executeConfig.mysql.sharding.databases.job_execute.shardingRule.jobInstance.dataNodes |quote }}
                # 作业实例按业务查询数据分库分表算法
                task_instance_app_complex:
                  type: JOB_INSTANCE_APP
                  props:
                    dataNodes: {{ .Values.executeConfig.mysql.sharding.databases.job_execute.shardingRule.jobInstanceSearch.dataNodes | quote }}
                    {{- if .Values.executeConfig.mysql.sharding.databases.job_execute.shardingRule.jobInstanceSearch.shardingAlgorithmProps }}
                    {{- toYaml .Values.executeConfig.mysql.sharding.databases.job_execute.shardingRule.jobInstanceSearch.shardingAlgorithmProps | nindent 20 }}
                    {{- end }}
                    shardingColumnNameMapping: "app_id=app_id,task_instance_id=id"
                task_instance_host_complex:
                  type: JOB_INSTANCE_APP
                  props:
                    dataNodes: {{ .Values.executeConfig.mysql.sharding.databases.job_execute.shardingRule.jobInstanceSearch.dataNodes | quote }}
                    {{- if .Values.executeConfig.mysql.sharding.databases.job_execute.shardingRule.jobInstanceSearch.shardingAlgorithmProps }}
                    {{- toYaml .Values.executeConfig.mysql.sharding.databases.job_execute.shardingRule.jobInstanceSearch.shardingAlgorithmProps | nindent 20 }}
                    {{- end }}
                    shardingColumnNameMapping: "app_id=app_id,task_instance_id=task_instance_id"
      {{- end }}
    idGen:
      type: {{ .Values.executeConfig.idGen.type }}
      migration:
        enabled: {{ .Values.executeConfig.idGen.migration.enabled }}
    {{- if .Values.executeConfig.leaf.enabled }}
    # 分布式 ID （leaf 组件配置)
    leaf:
      enabled: true
      segment:
        allocStrategyDaoBeanName: jooqLeafIdAllocator
        enable: true
        url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_leaf{{ include "job.mariadb.connection.properties" . }}
        username: {{ include "job.mariadb.username" . }}
        {{ if .Values.externalMariaDB.existingPasswordSecret }}
        password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
        {{- else -}}
        password: ${mariadb-password}
        {{- end }}
      snowflake:
        enable: false
      name: job-leaf
    {{- end }}
{{- end }}
