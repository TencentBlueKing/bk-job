{{- if and .Values.executeConfig.enabled (eq .Values.deploy.mode "standard") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-execute
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: "job-execute"
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
data:
  application.yaml: |-
    spring:
      cloud:
        stream:
          defaultBinder: jobCommon
          binders:
            jobCommon:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
            jobExecute:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
          source: task;step;gseTask;resultHandleTaskResume;notifyMsg;callback
          bindings:
            handleJobEvent-in-0:
              destination: task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            task-out-0:
              destination: task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleStepEvent-in-0:
              destination: step
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            step-out-0:
              destination: step
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleGseTaskEvent-in-0:
              destination: gse.task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 10
            gseTask-out-0:
              destination: gse.task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 10
            handleResultHandleResumeEvent-in-0:
              destination: result.handle.task.resume
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            resultHandleTaskResume-out-0:
              destination: result.handle.task.resume
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleNotifyMsg-in-0:
              destination: notify.msg
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            notifyMsg-out-0:
              destination: notify.msg
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleCallbackMsg-in-0:
              destination: task.callback
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            callback-out-0:
              destination: task.callback
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
          rabbit:
            bindings:
              handleJobEvent-in-0:
                consumer:
                  maxConcurrency: 10
              task-out-0:
                consumer:
                  maxConcurrency: 10
              handleStepEvent-in-0:
                consumer:
                  maxConcurrency: 10
              step-out-0:
                consumer:
                  maxConcurrency: 10
              handleGseTaskEvent-in-0:
                consumer:
                  maxConcurrency: 20
              gseTask-out-0:
                consumer:
                  maxConcurrency: 20
              handleResultHandleResumeEvent-in-0:
                consumer:
                  maxConcurrency: 10
              resultHandleTaskResume-out-0:
                consumer:
                  maxConcurrency: 10
              handleNotifyMsg-in-0:
                consumer:
                  maxConcurrency: 10
              notifyMsg-out-0:
                consumer:
                  maxConcurrency: 10
              handleCallbackMsg-in-0:
                consumer:
                  maxConcurrency: 10
              callback-out-0:
                consumer:
                  maxConcurrency: 10
        function:
          definition: handleJobEvent;handleStepEvent;handleGseTaskEvent;handleResultHandleResumeEvent;handleNotifyMsg;handleCallbackMsg;busConsumer
      datasource:
        job-execute:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_execute{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 100
          minimum-idle: 20
          idle-timeout: 600000
          poolName: "job-execute"
          validationTimeout: 5000
        {{ if .Values.executeConfig.sharding.mariadb.enabled }}
        leaf:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_leaf{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 50
          minimum-idle: 10
          idle-timeout: 600000
          poolName: "job-leaf"
          validationTimeout: 5000
        {{- end }}
      redis:
        {{- include "job.redis.config" . | indent 8 }}
        database: 0
        lettuce:
          pool:
            min-idle: 5
            max-idle: 10
            max-active: 8
            max-wait: 1ms
          shutdown-timeout: 100ms
    server:
      port: {{ .Values.executeConfig.containerPort }}
    feign:
      {{- toYaml .Values.executeConfig.feign | nindent 6 }}
    job:
      execute:
        log-export:
          storage-backend: {{ .Values.executeConfig.logExport.storageBackend }}
          artifactory:
            repo: {{ .Values.executeConfig.logExport.artifactory.repo }}
        file:
          distribute:
            root-path: {{ .Values.fileDistribute.hostPath }}/local
        scriptTask:
          query:
            contentSizeLimit: {{ .Values.executeConfig.scriptTask.query.contentSizeLimit }}
    {{ if .Values.executeConfig.sharding.mariadb.enabled }}
    shardingsphere:
      enabled: true
      databaseName: "job_execute"
      dataSources:
        {{- range .Values.executeConfig.sharding.mariadb.datasources }}
        ds_{{ .index }}:
          driverClassName: {{ include "job.jdbcMysqlDriverClass" . }}
          jdbcUrl: {{ .jdbcUrl }}
          username: {{ .username }}
          password: {{ .password }}
        {{- end }}
      shardingRule:
        # 数据分片规则配置
        tables:
          task_instance:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "task_instance" "context" $) }}
            databaseStrategy:
              type: standard
              shardingColumn: id
              shardingAlgorithmName: task_instance_database_inline
            tableStrategy:
              type: standard
              shardingColumn: id
              shardingAlgorithmName: task_instance_table_inline
          step_instance:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: step_instance_table_inline
          step_instance_script:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_script" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: step_instance_script_table_inline
          step_instance_file:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_file" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: step_instance_file_table_inline
          step_instance_confirm:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_confirm" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: step_instance_confirm_table_inline
          gse_script_execute_obj_task:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "gse_script_execute_obj_task" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: gse_script_execute_obj_task_table_inline
          gse_file_execute_obj_task:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "gse_file_execute_obj_task" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: gse_file_execute_obj_task_table_inline
          gse_task:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "gse_task" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: gse_task_table_inline
          file_source_log:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "file_source_log" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: file_source_log_table_inline
          operation_log:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "operation_log" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: operation_log_table_inline
          task_instance_variable:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "task_instance_variable" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: task_instance_variable_table_inline
          step_instance_variable:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_variable" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: step_instance_variable_table_inline
          rolling_config:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "rolling_config" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: rolling_config_table_inline
          step_instance_rolling_task:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "step_instance_rolling_task" "context" $) }}
            tableStrategy:
              type: standard
              shardingColumn: task_instance_id
              shardingAlgorithmName: step_instance_rolling_task_table_inline
          task_instance_app:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "task_instance_app" "context" $) }}
            databaseStrategy:
              type: standard
              shardingColumn: app_id
              shardingAlgorithmName: app_id_database_inline
            tableStrategy:
              type: standard
              shardingColumn: app_id
              shardingAlgorithmName: task_instance_app_table_inline
          task_instance_host_app:
            actualDataNodes: {{ include "job.execute.sharding.actualDataNodes" ( dict "tableName" "task_instance_host_app" "context" $) }}
            databaseStrategy:
              type: standard
              shardingColumn: app_id
              shardingAlgorithmName: app_id_database_inline
            tableStrategy:
              type: standard
              shardingColumn: app_id
              shardingAlgorithmName: task_instance_host_app_table_inline
        # 绑定表规则
        bindingTables: 
          - task_instance_app,task_instance_host_app
        # 默认分库策略
        defaultDatabaseStrategy:
          type: standard
          shardingColumn: task_instance_id
          shardingAlgorithmName: default_database_inline
        ## 分库分表算法
        shardingAlgorithms:
          ## 分库算法
          ##
          # 默认分库算法
          default_database_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.database.algorithm.expression" ( dict "columnName" "task_instance_id" "context" $) }} 
          # task_instance 表分库算法
          task_instance_database_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.database.algorithm.expression" ( dict "columnName" "id" "context" $) }} 
          # 按业务分库算法
          app_id_database_inline:
            type : INLINE
            props :
              algorithm-expression : {{ include "job.execute.sharding.database.algorithm.expression" ( dict "columnName" "app_id" "context" $) }} 
          ## 分表算法
          task_instance_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "task_instance" "columnName" "id" "context" $) }} 
          step_instance_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "step_instance" "columnName" "task_instance_id" "context" $) }}
          step_instance_script_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_script" "columnName" "task_instance_id" "context" $) }}
          step_instance_file_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_file" "columnName" "task_instance_id" "context" $) }}
          step_instance_confirm_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_confirm" "columnName" "task_instance_id" "context" $) }}
          gse_script_execute_obj_task_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "gse_script_execute_obj_task" "columnName" "task_instance_id" "context" $) }}
          gse_file_execute_obj_task_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "gse_file_execute_obj_task" "columnName" "task_instance_id" "context" $) }}
          gse_task_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "gse_task" "columnName" "task_instance_id" "context" $) }}
          file_source_log_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "file_source_log" "columnName" "task_instance_id" "context" $) }}
          operation_log_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "operation_log" "columnName" "task_instance_id" "context" $) }}
          task_instance_variable_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "task_instance_variable" "columnName" "task_instance_id" "context" $) }}
          step_instance_variable_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_variable" "columnName" "task_instance_id" "context" $) }}
          rolling_config_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "rolling_config" "columnName" "task_instance_id" "context" $) }}
          step_instance_rolling_task_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "step_instance_rolling_task" "columnName" "task_instance_id" "context" $) }}
          task_instance_app_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "task_instance_app" "columnName" "app_id" "context" $) }}
          task_instance_host_app_table_inline:
            type: INLINE
            props:
              algorithm-expression: {{ include "job.execute.sharding.table.algorithm.expression" ( dict "tableName" "task_instance_host_app" "columnName" "app_id" "context" $) }}
    # 分布式 ID （leaf 组件配置)
    leaf:
      segment:
        allocStrategyDaoBeanName: jooqLeafIdAllocator
        enable: true
        url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_leaf{{ include "job.mariadb.connection.properties" . }}
        username: {{ include "job.mariadb.username" . }}
        {{ if .Values.externalMariaDB.existingPasswordSecret }}
        password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
        {{- else -}}
        password: ${mariadb-password}
        {{- end }}
      snowflake:
        enable: false
      name: job-leaf
        
    {{- end }}

{{- end }}
