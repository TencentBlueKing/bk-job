{{- if and .Values.executeConfig.enabled (eq .Values.deploy.mode "standard") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-execute
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: "job-execute"
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
data:
  application.yaml: |-
    spring:
      cloud:
        stream:
          defaultBinder: jobCommon
          binders:
            jobCommon:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
            jobExecute:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
          source: task;step;gseTask;resultHandleTaskResume;notifyMsg;callback
          bindings:
            handleJobEvent-in-0:
              destination: task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            task-out-0:
              destination: task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleStepEvent-in-0:
              destination: step
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            step-out-0:
              destination: step
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleGseTaskEvent-in-0:
              destination: gse.task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 10
            gseTask-out-0:
              destination: gse.task
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 10
            handleResultHandleResumeEvent-in-0:
              destination: result.handle.task.resume
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            resultHandleTaskResume-out-0:
              destination: result.handle.task.resume
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleNotifyMsg-in-0:
              destination: notify.msg
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            notifyMsg-out-0:
              destination: notify.msg
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            handleCallbackMsg-in-0:
              destination: task.callback
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
            callback-out-0:
              destination: task.callback
              group: service.job.execute
              binder: jobExecute
              consumer:
                concurrency: 5
          rabbit:
            bindings:
              handleJobEvent-in-0:
                consumer:
                  maxConcurrency: 10
              task-out-0:
                consumer:
                  maxConcurrency: 10
              handleStepEvent-in-0:
                consumer:
                  maxConcurrency: 10
              step-out-0:
                consumer:
                  maxConcurrency: 10
              handleGseTaskEvent-in-0:
                consumer:
                  maxConcurrency: 20
              gseTask-out-0:
                consumer:
                  maxConcurrency: 20
              handleResultHandleResumeEvent-in-0:
                consumer:
                  maxConcurrency: 10
              resultHandleTaskResume-out-0:
                consumer:
                  maxConcurrency: 10
              handleNotifyMsg-in-0:
                consumer:
                  maxConcurrency: 10
              notifyMsg-out-0:
                consumer:
                  maxConcurrency: 10
              handleCallbackMsg-in-0:
                consumer:
                  maxConcurrency: 10
              callback-out-0:
                consumer:
                  maxConcurrency: 10
        function:
          definition: handleJobEvent;handleStepEvent;handleGseTaskEvent;handleResultHandleResumeEvent;handleNotifyMsg;handleCallbackMsg;busConsumer
      datasource:
        job-execute:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_execute{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 100
          minimum-idle: 20
          idle-timeout: 600000
          poolName: "job-execute"
          validationTimeout: 5000
      redis:
        {{- include "job.redis.config" . | indent 8 }}
        database: 0
        lettuce:
          pool:
            min-idle: 5
            max-idle: 10
            max-active: 8
            max-wait: 1ms
          shutdown-timeout: 100ms
    server:
      port: {{ .Values.executeConfig.containerPort }}
    feign:
      {{- toYaml .Values.executeConfig.feign | nindent 6 }}
    job:
      execute:
        log-export:
          storage-backend: {{ .Values.executeConfig.logExport.storageBackend }}
          artifactory:
            repo: {{ .Values.executeConfig.logExport.artifactory.repo }}
        file:
          distribute:
            root-path: {{ .Values.fileDistribute.hostPath }}/local
{{- end }}
