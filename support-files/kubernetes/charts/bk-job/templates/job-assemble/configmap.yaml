{{- if eq .Values.deploy.mode "lite" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-assemble
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: "job-assemble"
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
data:
  application.yaml: |-
    ## Spring 配置 ##
    spring:
      application:
        name: job-assemble
      profiles:
        active: prod
      servlet:
        multipart:
          max-file-size: 5GB
          max-request-size: 5GB
      cloud:
        stream:
          defaultBinder: jobCommon
          binders:
            jobCommon:
              type: rabbit
              environment:
                spring:
                  rabbitmq:
                    host: {{ include "job.rabbitmq.host" . }}
                    port: {{ include "job.rabbitmq.port" . }}
                    username: {{ include "job.rabbitmq.username" . }}
                    {{ if .Values.externalRabbitMQ.existingPasswordSecret }}
                    password: {{ .Values.externalRabbitMQ.existingPasswordKey | default "rabbitmq-password" | printf "${%s}" }}
                    {{- else -}}
                    password: ${rabbitmq-password}
                    {{- end }}
                    virtual-host: {{ include "job.rabbitmq.vhost" . }}
          source: task;step;gseTask;resultHandleTaskResume;notifyMsg;callback;crontabFanout
          bindings:
            handleJobEvent-in-0:
              destination: task
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            task-out-0:
              destination: task
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            handleStepEvent-in-0:
              destination: step
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            step-out-0:
              destination: step
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            handleGseTaskEvent-in-0:
              destination: gse.task
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 10
            gseTask-out-0:
              destination: gse.task
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 10
            handleResultHandleResumeEvent-in-0:
              destination: result.handle.task.resume
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            resultHandleTaskResume-out-0:
              destination: result.handle.task.resume
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            handleNotifyMsg-in-0:
              destination: notify.msg
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            notifyMsg-out-0:
              destination: notify.msg
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            handleCallbackMsg-in-0:
              destination: task.callback
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            callback-out-0:
              destination: task.callback
              group: service.job.execute
              binder: jobCommon
              consumer:
                concurrency: 5
            handleCrontabFanoutEvent-in-0:
              destination: crontab.fanout
              binder: jobCommon
              consumer:
                concurrency: 5
            crontabFanout-out-0:
              destination: crontab.fanout
              binder: jobCommon
              consumer:
                concurrency: 5
          rabbit:
            bindings:
              handleJobEvent-in-0:
                consumer:
                  maxConcurrency: 10
              task-out-0:
                consumer:
                  maxConcurrency: 10
              handleStepEvent-in-0:
                consumer:
                  maxConcurrency: 10
              step-out-0:
                consumer:
                  maxConcurrency: 10
              handleGseTaskEvent-in-0:
                consumer:
                  maxConcurrency: 20
              gseTask-out-0:
                consumer:
                  maxConcurrency: 20
              handleResultHandleResumeEvent-in-0:
                consumer:
                  maxConcurrency: 10
              resultHandleTaskResume-out-0:
                consumer:
                  maxConcurrency: 10
              handleNotifyMsg-in-0:
                consumer:
                  maxConcurrency: 10
              notifyMsg-out-0:
                consumer:
                  maxConcurrency: 10
              handleCallbackMsg-in-0:
                consumer:
                  maxConcurrency: 10
              callback-out-0:
                consumer:
                  maxConcurrency: 10
              handleCrontabFanoutEvent-in-0:
                consumer:
                  maxConcurrency: 5
                  exchangeType: fanout
              crontabFanout-out-0:
                producer:
                  exchangeType: fanout
                consumer:
                  maxConcurrency: 5
                  exchangeType: fanout
        function:
          definition: handleJobEvent;handleStepEvent;handleGseTaskEvent;handleResultHandleResumeEvent;handleNotifyMsg;handleCallbackMsg;busConsumer;handleCrontabFanoutEvent
      datasource:
        job-manage:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_manage{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 100
          minimum-idle: 20
          idle-timeout: 600000
          poolName: "job-manage"
          validationTimeout: 5000
        job-execute:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_execute{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 100
          minimum-idle: 20
          idle-timeout: 600000
          poolName: "job-execute"
          validationTimeout: 5000
        job-crontab:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          {{- include "job.crontab.databaseConfig" . | nindent 10 }}
          maximum-pool-size: {{ .Values.crontabConfig.database.maxPoolSize }}
          minimum-idle: 20
          idle-timeout: 600000
          poolName: "job-crontab"
          validationTimeout: 5000
        job-file-gateway:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_file_gateway{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 100
          minimum-idle: 20
          idle-timeout: 600000
          poolName: "job-file-gateway"
          validationTimeout: 5000
        job-analysis:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_analysis{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 100
          minimum-idle: 20
          idle-timeout: 600000
          poolName: "job-analysis"
          validationTimeout: 5000
        job-backup:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{- include "job.mariadb.host" . }}:{{- include "job.mariadb.port" . }}/job_backup{{ include "job.mariadb.connection.properties" . }}
          username: {{ include "job.mariadb.username" . }}
          {{ if .Values.externalMariaDB.existingPasswordSecret }}
          password: {{ .Values.externalMariaDB.existingPasswordKey | default "mariadb-password" | printf "${%s}" }}
          {{- else -}}
          password: ${mariadb-password}
          {{- end }}
          maximum-pool-size: 100
          minimum-idle: 20
          idle-timeout: 600000
          poolName: "job-backup"
          validationTimeout: 5000
        {{- if and .Values.backupConfig.archive.execute.enabled (eq .Values.backupConfig.archive.execute.mode "backupThenDelete") }}
        job-execute-archive:
          driver-class-name: {{ include "job.jdbcMysqlDriverClass" . }}
          type: com.zaxxer.hikari.HikariDataSource
          jdbc-url: {{ include "job.jdbcMysqlScheme" . }}://{{ .Values.backupConfig.archive.mariadb.host }}:{{ .Values.backupConfig.archive.mariadb.port }}/job_execute{{ .Values.backupConfig.archive.mariadb.connection.properties }}
          username: {{ .Values.backupConfig.archive.mariadb.username }}
          password: ${archive-mariadb-password}
          maximum-pool-size: 10
          minimum-idle: 2
          idle-timeout: 6000
          poolName: "job-execute-archive"
          validationTimeout: 5000
        {{- end }}
      redis:
        {{- include "job.redis.config" . | indent 8 }}
        database: 0
        lettuce:
          pool:
            min-idle: 5
            max-idle: 10
            max-active: 8
            max-wait: 1ms
          shutdown-timeout: 100ms
      data:
        mongodb:
          uri: {{ include "job.mongodb.connect.uri" . | quote }}
          database: "joblog"
      quartz:
        job-store-type: MEMORY
        properties:
          org:
            quartz:
              jobStore:
                class: org.quartz.simpl.RAMJobStore
                misfireThreshold: 60000
              plugin:
                shutdownhook:
                  class: org.quartz.plugins.management.ShutdownHookPlugin
                  cleanShutdown: true
                triggHistory:
                  class: org.quartz.plugins.history.LoggingJobHistoryPlugin
              scheduler:
                # 调度器实例名称
                instanceName: quartz-scheduler
                # 调度器实例编号自动生成
                instanceId: AUTO
                skipUpdateCheck: true
                batchTriggerAcquisitionMaxCount: {{ .Values.crontabConfig.quartz.scheduler.batchTriggerAcquisitionMaxCount }}
              threadPool:
                class: org.quartz.simpl.SimpleThreadPool
                threadCount: {{ .Values.crontabConfig.quartz.threadPool.threadCount }}

    ## 其他框架组件配置 ##
    server:
      port: {{ .Values.assembleConfig.containerPort }}
    feign:
      {{- toYaml .Values.assembleConfig.feign | nindent 6 }}

    ## Job 配置 ##
    job:
      backup:
        storage-backend: {{ .Values.backupConfig.storageBackend }}
        artifactory:
          repo: {{ .Values.backupConfig.artifactory.repo }}
        archive:  
          execute:
            {{- toYaml .Values.backupConfig.archive.execute | nindent 12 }}
      logsvr:
        mongodb:
          shard:
            enabled: {{ include "job.mongodb.useShardingCluster" . }}
      manage:
        sync:
          app:
            enabled: {{ .Values.manageConfig.sync.app.enabled }}
          host:
            enabled: {{ .Values.manageConfig.sync.host.enabled }}
          resource:
            watch:
              enabled: {{ .Values.manageConfig.sync.resource.watch.enabled }}
          hostEvent:
            handlerNum: {{ .Values.manageConfig.sync.hostEvent.handlerNum }}
        notify:
          default:
            channels:
              available: mail
      execute:
        # 执行日志导出产生的临时文件相关配置        
        log-export:
          storage-backend: {{ .Values.executeConfig.logExport.storageBackend }}
          artifactory:
            repo: {{ .Values.executeConfig.logExport.artifactory.repo }}
        file:
          distribute:
            root-path: {{ .Values.fileDistribute.hostPath }}/local
      crontab:
        notification-policy:
          failed:
            start:
              begin: {{ .Values.crontabConfig.notificationPolicy.failed.start.begin | default 1 }}
              frequency: {{ .Values.crontabConfig.notificationPolicy.failed.start.frequency | default 5 }}
              total: {{ .Values.crontabConfig.notificationPolicy.failed.start.total | default -1 }}
      file-gateway:
        reDispatch:
          {{- toYaml .Values.fileGatewayConfig.reDispatch | nindent 10 }}
        worker-tags:
          white: {{ .Values.fileGatewayConfig.workerTags.white }}
          black: {{ .Values.fileGatewayConfig.workerTags.black }}
    bk:
      doc:
        root: {{ .Values.bkDocsCenterUrl }}
      feedback:
        root: {{ .Values.bkFeedBackUrl }}
    deploy:
      mode: lite    
{{- end }}
